diff --git a/modules/recurlyjs/recurlyjs.links.task.yml b/modules/recurlyjs/recurlyjs.links.task.yml
new file mode 100644
index 0000000..21921e6
--- /dev/null
+++ b/modules/recurlyjs/recurlyjs.links.task.yml
@@ -0,0 +1,3 @@
+recurlyjs.entities:
+  class: \Drupal\Core\Menu\LocalTaskDefault
+  deriver: \Drupal\recurlyjs\Plugin\Derivative\RecurlyJsLocalTask
diff --git a/modules/recurlyjs/recurlyjs.module b/modules/recurlyjs/recurlyjs.module
index e4ab862..b8257a9 100644
--- a/modules/recurlyjs/recurlyjs.module
+++ b/modules/recurlyjs/recurlyjs.module
@@ -12,17 +12,18 @@ use Drupal\Core\Url;
  * Implements hook_recurly_url_info().
  */
 function recurlyjs_recurly_url_info($operation, $context) {
+  $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
   switch ($operation) {
     case 'update_billing':
       $entity_info = recurly_account_load(['account_code' => $context['account']->account_code], TRUE);
-      return Url::fromRoute('recurlyjs.update_billing', ['entity' => $context['entity']->id()]);
+      return Url::fromRoute("entity.$entity_type_id.recurlyjs_billing", [$entity_type_id => $context['entity']->id()]);
 
     case 'subscribe':
       $default_currency = \Drupal::config('recurly.settings')->get('recurly_default_currency') ?: 'USD';
       $currency_string = !isset($context['currency']) || $context['currency'] == $default_currency ? '' : '/' . $context['currency'];
       \Drupal::logger('recurly')->notice('subscribe', []);
-      return Url::fromRoute('recurlyjs.subscription_signup', [
-        'entity' => $context['entity']->id(),
+      return Url::fromRoute("entity.$entity_type_id.recurlyjs_signup", [
+        $entity_type_id => $context['entity']->id(),
         'plan_code' => $context['plan_code'],
         'currency' => $currency_string,
       ]);
@@ -121,3 +122,19 @@ function recurlyjs_settings_form_submit(array &$form, FormStateInterface $form_s
     ->set('recurlyjs_accept_paypal', $form_state->getValue('recurlyjs_accept_paypal'))
     ->save();
 }
+
+/**
+ * Implements hook_entity_type_alter().
+ */
+function recurlyjs_entity_type_alter(array &$entity_types) {
+  $recurly_entity_type = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+  $entity_type = $entity_types[$recurly_entity_type];
+  // Set up our link templates to be used in our routes.
+  // See alterRoutes in Drupal\recurlyjs\Routing\RecurlyJsRouteSubscriber.
+  if ($entity_type->hasViewBuilderClass() && $entity_type->hasLinkTemplate('canonical')) {
+    $entity_type->setLinkTemplate('recurlyjs-signup', $entity_type->getLinkTemplate('canonical') . '/subscription/signup/{plan_code}');
+    $entity_type->setLinkTemplate('recurlyjs-billing', $entity_type->getLinkTemplate('canonical') . '/subscription/billing');
+  }
+
+
+}
diff --git a/modules/recurlyjs/recurlyjs.routing.yml b/modules/recurlyjs/recurlyjs.routing.yml
deleted file mode 100644
index 0a44ab8..0000000
--- a/modules/recurlyjs/recurlyjs.routing.yml
+++ /dev/null
@@ -1,2 +0,0 @@
-route_callbacks:
-  - '\Drupal\recurlyjs\Routing\RecurlyJsRoutes::routes'
diff --git a/modules/recurlyjs/recurlyjs.services.yml b/modules/recurlyjs/recurlyjs.services.yml
new file mode 100644
index 0000000..9d919e8
--- /dev/null
+++ b/modules/recurlyjs/recurlyjs.services.yml
@@ -0,0 +1,6 @@
+services:
+  recurlyjs.route_subscriber:
+    class: Drupal\recurlyjs\Routing\RecurlyJsRouteSubscriber
+    arguments: ['@entity.manager']
+    tags:
+      - { name: event_subscriber }
diff --git a/modules/recurlyjs/src/Controller/RecurlyJsSubscriptionSignupController.php b/modules/recurlyjs/src/Controller/RecurlyJsSubscriptionSignupController.php
index e02b191..11beb7a 100644
--- a/modules/recurlyjs/src/Controller/RecurlyJsSubscriptionSignupController.php
+++ b/modules/recurlyjs/src/Controller/RecurlyJsSubscriptionSignupController.php
@@ -7,9 +7,15 @@
 
 namespace Drupal\recurlyjs\Controller;
 
+use Drupal\Component\Utility\SafeMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
+use Drupal\Core\Field;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Url;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
 
 /**
  * Returns responses for Recurly Subscription List.
@@ -29,7 +35,11 @@ class RecurlyJsSubscriptionSignupController extends ControllerBase {
    * @return array
    *   A Drupal render array.
    */
-  public function subscribe(EntityInterface $entity, $plan_code, $currency = NULL) {
+  public function subscribe(RouteMatchInterface $route_match) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
+    $plan_code = $route_match->getParameter('plan_code');
+    $currency = $route_match->getParameter('currency');
     // Initialize the Recurly client with the site-wide settings.
     if (!recurly_client_initialize()) {
       return ['#markup' => $this->t('Could not initialize the Recurly client.')];
diff --git a/modules/recurlyjs/src/Form/RecurlyJsSubscribeForm.php b/modules/recurlyjs/src/Form/RecurlyJsSubscribeForm.php
index 657fe0d..379be7d 100644
--- a/modules/recurlyjs/src/Form/RecurlyJsSubscribeForm.php
+++ b/modules/recurlyjs/src/Form/RecurlyJsSubscribeForm.php
@@ -109,7 +109,9 @@ class RecurlyJsSubscribeForm extends RecurlyJsFormBase {
     catch (\Recurly_Error $e) {
       \Drupal::logger('recurlyjs')->error('New subscriber account could not be retreived from Recurly. Received the following error: @error', ['@error' => $e->getMessage()]);
     }
-    return $this->redirect('recurly.subscription_list', ['entity' => $entity->id()]);
+    return $this->redirect("entity.$entity_type.recurly_subscriptionlist", [
+      $entity->getEntityType()->getLowercaseLabel() => $entity->id(),
+    ]);
   }
 
   /**
diff --git a/modules/recurlyjs/src/Form/RecurlyJsUpdateBillingForm.php b/modules/recurlyjs/src/Form/RecurlyJsUpdateBillingForm.php
index 46d0135..4d6567a 100644
--- a/modules/recurlyjs/src/Form/RecurlyJsUpdateBillingForm.php
+++ b/modules/recurlyjs/src/Form/RecurlyJsUpdateBillingForm.php
@@ -7,9 +7,12 @@
 
 namespace Drupal\recurlyjs\Form;
 
+
+use Drupal\Component\Utility\SafeMarkup;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
-use Drupal\Component\Utility\SafeMarkup;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Url;
 
 /**
  * RecurlyJS update billing form.
@@ -41,7 +44,9 @@ class RecurlyJsUpdateBillingForm extends RecurlyJsFormBase {
   /**
    * {@inheritdoc}
    */
-  public function buildForm(array $form, FormStateInterface $form_state, EntityInterface $entity = NULL) {
+  public function buildForm(array $form, FormStateInterface $form_state, RouteMatchInterface $route_match = NULL) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
     // Initialize the Recurly client with the site-wide settings.
     if (!recurly_client_initialize()) {
       $form['error'] = [
diff --git a/modules/recurlyjs/src/Plugin/Derivative/RecurlyJsLocalTask.php b/modules/recurlyjs/src/Plugin/Derivative/RecurlyJsLocalTask.php
new file mode 100644
index 0000000..cd71fa7
--- /dev/null
+++ b/modules/recurlyjs/src/Plugin/Derivative/RecurlyJsLocalTask.php
@@ -0,0 +1,87 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\recurlyjs\Plugin\Derivative\RecurlyJsLocalTask.
+ */
+
+namespace Drupal\recurlyjs\Plugin\Derivative;
+
+use Drupal\Component\Plugin\Derivative\DeriverBase;
+use Drupal\Core\Entity\EntityManagerInterface;
+use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\Core\StringTranslation\TranslationInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Provides local task definitions for all entity bundles.
+ */
+class RecurlyJsLocalTask extends DeriverBase implements ContainerDeriverInterface {
+
+  use StringTranslationTrait;
+
+  /**
+   * The entity manager.
+   *
+   * @var \Drupal\Core\Entity\EntityManagerInterface
+   */
+  protected $entityManager;
+
+  /**
+   * Creates a RecurlyJsLocalTask object.
+   *
+   * @param \Drupal\Core\Entity\EntityManagerInterface $entity_manager
+   *   The entity manager.
+   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   *   The translation manager.
+   */
+  public function __construct(EntityManagerInterface $entity_manager, TranslationInterface $string_translation) {
+    $this->entityManager = $entity_manager;
+    $this->stringTranslation = $string_translation;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, $base_plugin_id) {
+    return new static(
+      $container->get('entity.manager'),
+      $container->get('string_translation')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDerivativeDefinitions($base_plugin_definition) {
+    // We are creating our local menu tasks here.
+    // $base_plugin_definition contains our base class(\Drupal\Core\Menu\LocalTaskDefault),
+    // the deriver class(this), provider(recurlyjs) and id(recurlyjs.entities).
+    // See recurlyjs.links.task.yml.
+    $this->derivatives = array();
+    // Get the entity type associated with recurly.
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    // Get all the plugins available to the entity (block, menu, user, etc.).
+    $entity_manager_definitions = $this->entityManager->getDefinitions();
+    // Pull our entity type.
+    $entity_type = $entity_manager_definitions[$entity_type_id];
+    // Get the canonical path for this entity and recurly.
+    $has_canonical_path = $entity_type->hasLinkTemplate('recurly-subscriptionlist');
+    // If we have the canonical path for this entity type, add tabs.
+    if ($has_canonical_path) {
+      $this->derivatives["$entity_type_id.recurlyjs_billing_tab"] = array(
+        'route_name' => "entity.$entity_type_id.recurlyjs_billing",
+        'title' => $this->t('Update billing information'),
+        'parent_id' => "recurly.entities:$entity_type_id.recurly_tab",
+        'weight' => 100,
+      );
+    }
+    // Add the tabs to $base_plugin_definition.
+    foreach ($this->derivatives as &$entry) {
+      $entry += $base_plugin_definition;
+    }
+    return $this->derivatives;
+  }
+
+}
diff --git a/modules/recurlyjs/src/Routing/RecurlyJsRouteSubscriber.php b/modules/recurlyjs/src/Routing/RecurlyJsRouteSubscriber.php
new file mode 100644
index 0000000..647d1f1
--- /dev/null
+++ b/modules/recurlyjs/src/Routing/RecurlyJsRouteSubscriber.php
@@ -0,0 +1,102 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\recurlyjs\Routing\RecurlyJsRouteSubscriber.
+ */
+
+namespace Drupal\recurlyjs\Routing;
+
+use Drupal\Core\Entity\EntityManagerInterface;
+use Drupal\Core\Routing\RouteSubscriberBase;
+use Drupal\Core\Routing\RoutingEvents;
+use Symfony\Component\Routing\Route;
+use Symfony\Component\Routing\RouteCollection;
+
+/**
+ * Subscriber for Recurly routes.
+ */
+class RecurlyJsRouteSubscriber extends RouteSubscriberBase {
+
+  /**
+   * The entity manager service.
+   *
+   * @var \Drupal\Core\Entity\EntityManagerInterface
+   */
+  protected $entityManager;
+
+  /**
+   * Constructs a new RouteSubscriber object.
+   *
+   * @param \Drupal\Core\Entity\EntityManagerInterface $entity_manager
+   *   The entity type manager.
+   */
+  public function __construct(EntityManagerInterface $entity_manager) {
+    $this->entityManager = $entity_manager;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function alterRoutes(RouteCollection $collection) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity_manager_definitions = $this->entityManager->getDefinitions();
+    $entity_type = $entity_manager_definitions[$entity_type_id];
+    $options = array(
+      '_admin_route' => TRUE,
+      '_recurly_entity_type_id' => $entity_type_id,
+      'parameters' => array(
+        $entity_type_id => array(
+          'type' => 'entity:' . $entity_type_id,
+        ),
+      ),
+    );
+    if ($recurlyjs_signup = $entity_type->getLinkTemplate('recurlyjs-signup')) {
+      // Create the route object.
+      $route = new Route(
+        $recurlyjs_signup,
+        array(
+          '_controller' => '\Drupal\recurlyjs\Controller\RecurlyJsSubscriptionSignupController::subscribe',
+          '_title' => 'Signup',
+          'operation' => 'signup',
+        ),
+        array(
+          '_entity_access' => "$entity_type_id.update",
+          '_access_check_recurly_user' => 'TRUE',
+          '_access_check_recurly_list' => 'TRUE',
+        ),
+        $options
+      );
+      // Give it a name and add it to the route collection.
+      $collection->add("entity.$entity_type_id.recurlyjs_signup", $route);
+    }
+    if ($recurlyjs_billing = $entity_type->getLinkTemplate('recurlyjs-billing')) {
+      $route = new Route(
+        $recurlyjs_billing,
+        array(
+          '_form' => '\Drupal\recurlyjs\Form\RecurlyJsUpdateBillingForm',
+          '_title' => 'Update billing information',
+          'operation' => 'update_billing',
+        ),
+        array(
+          '_entity_access' => "$entity_type_id.update",
+          '_access_check_recurly_user' => 'TRUE',
+          '_access_check_recurly_list' => 'TRUE',
+        ),
+        $options
+      );
+
+      $collection->add("entity.$entity_type_id.recurlyjs_billing", $route);
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getSubscribedEvents() {
+    $events = parent::getSubscribedEvents();
+    $events[RoutingEvents::ALTER] = array('onAlterRoutes', 100);
+    return $events;
+  }
+
+}
diff --git a/modules/recurlyjs/src/Routing/RecurlyJsRoutes.php b/modules/recurlyjs/src/Routing/RecurlyJsRoutes.php
deleted file mode 100644
index 8a80516..0000000
--- a/modules/recurlyjs/src/Routing/RecurlyJsRoutes.php
+++ /dev/null
@@ -1,60 +0,0 @@
-<?php
-
-/**
- * @file
- * Contains \Drupal\recurlyjs\Routing\RecurlyJsRoutes.
- */
-
-namespace Drupal\recurlyjs\Routing;
-
-use Symfony\Component\Routing\Route;
-
-/**
- * Defines dynamic routes.
- */
-class RecurlyJsRoutes {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function routes() {
-    $routes = [];
-
-    // Find out what kind of entity we're dealing with.
-    $entity_type = \Drupal::config('recurly.settings')->get('recurly_entity_type');
-
-    if ($entity_type && \Drupal::config('recurly.settings')->get('recurly_pages')) {
-      $routes['recurlyjs.update_billing'] = new Route(
-        "/$entity_type/{entity}/subscription/billing",
-        [
-          '_form' => '\Drupal\recurlyjs\Form\RecurlyJsUpdateBillingForm',
-          '_title' => 'Update billing information',
-          'operation' => 'update_billing',
-        ],
-        [
-          '_entity_access' => 'entity.update',
-          '_access_check_recurly_user' => 'TRUE',
-          '_access_check_recurly_default' => 'TRUE',
-        ],
-        ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-      );
-
-      $routes['recurlyjs.subscription_signup'] = new Route(
-        "/$entity_type/{entity}/subscription/signup/{plan_code}",
-        [
-          '_controller' => '\Drupal\recurlyjs\Controller\RecurlyJsSubscriptionSignupController::subscribe',
-          '_title' => 'Signup',
-          'operation' => 'signup',
-        ],
-        [
-          '_entity_access' => 'entity.update',
-          '_access_check_recurly_user' => 'TRUE',
-          '_access_check_recurly_default' => 'TRUE',
-        ],
-        ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-      );
-    }
-    return $routes;
-  }
-
-}
diff --git a/recurly.links.task.yml b/recurly.links.task.yml
index 9473e85..9fa3f40 100644
--- a/recurly.links.task.yml
+++ b/recurly.links.task.yml
@@ -8,3 +8,6 @@ recurly.subscription_plans_overview:
   title: 'Subscription plans'
   weight: -5
   base_route: recurly.settings_form
+recurly.entities:
+  class: \Drupal\Core\Menu\LocalTaskDefault
+  deriver: \Drupal\recurly\Plugin\Derivative\RecurlyLocalTask
diff --git a/recurly.module b/recurly.module
index e6d36ae..9f39fad 100644
--- a/recurly.module
+++ b/recurly.module
@@ -631,36 +631,37 @@ function recurly_url($operation, $context) {
  */
 function recurly_recurly_url_info($operation, $context) {
   // Only provide URLs for built-in page types.
-  $recurly_entity_type = \Drupal::config('recurly.settings')->get('recurly_entity_type');
-  if (empty($recurly_entity_type) || $recurly_entity_type !== $context['entity_type']) {
+  $recurly_entity_type = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+  $context_entity_type = empty($context['entity_type']) ? NULL : $context['entity_type'];
+  if (empty($recurly_entity_type) || $recurly_entity_type !== $context_entity_type) {
     return;
   }
 
   switch ($operation) {
     case 'select_plan':
-      return Url::fromRoute('recurly.subscription_signup', ['entity' => $context['entity']->id()]);
+      return Url::fromRoute("entity.$recurly_entity_type.recurly_signup", [$recurly_entity_type => $context['entity']->id()]);
 
     case 'change_plan':
-      return Url::fromRoute('recurly.subscription_plan_change', [
-        'entity' => $context['entity']->id(),
+      return Url::fromRoute("entity.$recurly_entity_type.recurly_planchange", [
+        $recurly_entity_type => $context['entity']->id(),
         'subscription_id' => $context['subscription']->uuid,
         'new_plan_code' => isset($context['plan_code']) ? $context['plan_code'] : NULL,
       ]);
 
     case 'cancel':
-      return Url::fromRoute('recurly.subscription_cancel', [
-        'entity' => $context['entity']->id(),
+      return Url::fromRoute("entity.$recurly_entity_type.recurly_cancel", [
+        $recurly_entity_type => $context['entity']->id(),
         'subscription_id' => $context['subscription']->uuid,
       ]);
 
     case 'reactivate':
-      return Url::fromRoute('recurly.subscription_reactivate', [
-        'entity' => $context['entity']->id(),
+      return Url::fromRoute("entity.$recurly_entity_type.recurly_reactivate", [
+        $recurly_entity_type => $context['entity']->id(),
         'subscription_id' => $context['subscription']->uuid,
       ]);
 
     case 'redeem_coupon':
-      return Url::fromRoute('recurly.redeem_coupon', ['entity' => $context['entity']->id()]);
+      return Url::fromRoute("entity.$recurly_entity_type.recurly_coupon", [$recurly_entity_type => $context['entity']->id()]);
   }
 }
 
@@ -1026,8 +1027,8 @@ function template_preprocess_recurly_invoice_list(&$variables) {
     }
 
     $row = [];
-    $row[] = Link::createFromRoute($invoice->invoice_number . $status, 'recurly.subscription_invoice', [
-      'entity' => $entity->id(),
+    $row[] = Link::createFromRoute($invoice->invoice_number . $status, "entity.$entity_type.recurly_invoice", [
+      $entity_type => $entity->id(),
       'invoice_number' => $invoice->invoice_number,
     ]);
 
@@ -1052,6 +1053,7 @@ function template_preprocess_recurly_invoice_list(&$variables) {
  * Implements hook_preprocess_recurly_invoice().
  */
 function template_preprocess_recurly_invoice(&$variables) {
+  $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
   $invoice = $variables['invoice'];
   $invoice_account = $variables['invoice_account'];
   $entity = $variables['entity'];
@@ -1061,8 +1063,8 @@ function template_preprocess_recurly_invoice(&$variables) {
   $paid_amount = $invoice->state === 'collected' ? $invoice->total_in_cents : 0;
   $variables += [
     'invoice_date' => recurly_format_date($invoice->created_at),
-    'pdf_link' => Link::createFromRoute(t('View PDF'), 'recurly.subscription_invoice_pdf', [
-      'entity' => $entity->id(),
+    'pdf_link' => Link::createFromRoute(t('View PDF'), "entity.$entity_type_id.recurly_invoicepdf", [
+      $entity_type_id => $entity->id(),
       'invoice_number' => $invoice->invoice_number,
     ]),
     'subtotal' => recurly_format_currency($invoice->subtotal_in_cents, $invoice->currency),
@@ -1109,3 +1111,27 @@ function template_preprocess_recurly_invoice(&$variables) {
   }
   $variables['transactions_total'] = recurly_format_currency($transaction_total, $invoice->currency);
 }
+
+/**
+ * Implements hook_entity_type_alter().
+ */
+function recurly_entity_type_alter(array &$entity_types) {
+  $recurly_entity_type = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+  $entity_type = $entity_types[$recurly_entity_type];
+  // Set up our link templates to be used in our routes.
+  // See alterRoutes in Drupal\recurly\Routing\RecurlyRouteSubscriber.
+  if ($entity_type->hasViewBuilderClass() && $entity_type->hasLinkTemplate('canonical')) {
+    $entity_type->setLinkTemplate('recurly-subscriptionlist', $entity_type->getLinkTemplate('canonical') . '/subscription');
+    $entity_type->setLinkTemplate('recurly-signup', $entity_type->getLinkTemplate('canonical') . '/subscription/signup');
+    $entity_type->setLinkTemplate('recurly-change', $entity_type->getLinkTemplate('canonical') . '/subscription/change');
+    $entity_type->setLinkTemplate('recurly-planchange', $entity_type->getLinkTemplate('canonical') . '/subscription/id/{subscription_id}/change/{new_plan_code}');
+    $entity_type->setLinkTemplate('recurly-cancellatest', $entity_type->getLinkTemplate('canonical') . '/subscription/cancel');
+    $entity_type->setLinkTemplate('recurly-cancel', $entity_type->getLinkTemplate('canonical') . '/subscription/id/{subscription_id}/cancel');
+    $entity_type->setLinkTemplate('recurly-reactivatelatest', $entity_type->getLinkTemplate('canonical') . '/subscription/reactivate');
+    $entity_type->setLinkTemplate('recurly-reactivate', $entity_type->getLinkTemplate('canonical') . '/subscription/id/{subscription_id}/cancel');
+    $entity_type->setLinkTemplate('recurly-invoices', $entity_type->getLinkTemplate('canonical') . '/subscription/invoices');
+    $entity_type->setLinkTemplate('recurly-invoice', $entity_type->getLinkTemplate('canonical') . '/subscription/invoices/{invoice_number}');
+    $entity_type->setLinkTemplate('recurly-invoicepdf', $entity_type->getLinkTemplate('canonical') . '/subscription/invoices/{invoice_number}/pdf');
+    $entity_type->setLinkTemplate('recurly-coupon', $entity_type->getLinkTemplate('canonical') . '/subscription/redeem-coupon');
+  }
+}
diff --git a/recurly.routing.yml b/recurly.routing.yml
index f7695ae..5cabe86 100644
--- a/recurly.routing.yml
+++ b/recurly.routing.yml
@@ -25,6 +25,3 @@ recurly.subscription_plans_overview:
     _form: \Drupal\recurly\Form\RecurlySubscriptionPlansForm
   requirements:
     _permission: 'administer recurly'
-# Handles dynamic routes.
-route_callbacks:
-  - '\Drupal\recurly\Routing\RecurlySubscriptionRoutes::routes'
diff --git a/recurly.services.yml b/recurly.services.yml
index 11b10c1..043878c 100644
--- a/recurly.services.yml
+++ b/recurly.services.yml
@@ -20,3 +20,8 @@ services:
     class: Drupal\recurly\RecurlyTokenManager
   recurly.url_manager:
     class: Drupal\recurly\RecurlyUrlManager
+  recurly.route_subscriber:
+    class: Drupal\recurly\Routing\RecurlyRouteSubscriber
+    arguments: ['@entity.manager']
+    tags:
+      - { name: event_subscriber }
diff --git a/src/Access/RecurlyAccess.php b/src/Access/RecurlyAccess.php
index eb05c5f..7ce9a4f 100644
--- a/src/Access/RecurlyAccess.php
+++ b/src/Access/RecurlyAccess.php
@@ -21,7 +21,7 @@ abstract class RecurlyAccess implements AccessInterface {
   /**
    * {@inheritdoc}
    */
-  public function access(Route $route, RouteMatchInterface $route_match, EntityInterface $entity) {
+  public function access(Route $route, RouteMatchInterface $route_match) {
   }
 
   /**
diff --git a/src/Access/RecurlyAccessDefault.php b/src/Access/RecurlyAccessDefault.php
index b5f1612..8bd1d09 100644
--- a/src/Access/RecurlyAccessDefault.php
+++ b/src/Access/RecurlyAccessDefault.php
@@ -25,7 +25,9 @@ class RecurlyAccessDefault extends RecurlyAccess {
   /**
    * {@inheritdoc}
    */
-  public function access(Route $route, RouteMatchInterface $route_match, EntityInterface $entity, $operation= NULL) {
+  public function access(Route $route, RouteMatchInterface $route_match, $operation = NULL) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
     $subscription_plans = \Drupal::config('recurly.settings')->get('recurly_subscription_plans') ?: [];
     $recurly_subscription_max = \Drupal::config('recurly.settings')->get('recurly_subscription_max');
     $local_account = recurly_account_load(['entity_type' => $entity->getEntityType()->getLowercaseLabel(), 'entity_id' => $entity->id()], TRUE);
diff --git a/src/Access/RecurlyAccessList.php b/src/Access/RecurlyAccessList.php
index be2ae4b..6c766ba 100644
--- a/src/Access/RecurlyAccessList.php
+++ b/src/Access/RecurlyAccessList.php
@@ -21,7 +21,9 @@ class RecurlyAccessList extends RecurlyAccess {
   /**
    * {@inheritdoc}
    */
-  public function access(Route $route, RouteMatchInterface $route_match, EntityInterface $entity) {
+  public function access(Route $route, RouteMatchInterface $route_match) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
     $entity_type = $entity->getEntityType()->getLowercaseLabel();
     $subscription_plans = \Drupal::config('recurly.settings')->get('recurly_subscription_plans') ?: [];
     $local_account = recurly_account_load(['entity_type' => $entity_type, 'entity_id' => $entity->id()], TRUE);
diff --git a/src/Access/RecurlyAccessUser.php b/src/Access/RecurlyAccessUser.php
index 54e8510..1540bbf 100644
--- a/src/Access/RecurlyAccessUser.php
+++ b/src/Access/RecurlyAccessUser.php
@@ -19,7 +19,9 @@ class RecurlyAccessUser extends RecurlyAccess {
   /**
    * {@inheritdoc}
    */
-  public function access(Route $route, RouteMatchInterface $route_match, EntityInterface $entity) {
+  public function access(Route $route, RouteMatchInterface $route_match) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
     $entity_type = $entity->getEntityType()->getLowercaseLabel();
     // If subscriptions are attached to users, only allow users to view their
     // own subscriptions.
diff --git a/src/Controller/RecurlyInvoicesController.php b/src/Controller/RecurlyInvoicesController.php
index 635ccae..6b82dfe 100644
--- a/src/Controller/RecurlyInvoicesController.php
+++ b/src/Controller/RecurlyInvoicesController.php
@@ -7,8 +7,14 @@
 
 namespace Drupal\recurly\Controller;
 
+use Drupal\Component\Utility\SafeMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Field;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Url;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 
 /**
@@ -19,10 +25,16 @@ class RecurlyInvoicesController extends ControllerBase {
   /**
    * Retreive all invoices for the specified entity.
    *
-   * @param EntityInterface $entity
-   *   The entity associated with Recurly subscriptions; most typically a user.
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   A RouteMatch object.
+   *   Contains information about the route and the entity being acted on.
+   *
+   * @return array
+   *   Returns a render array for a list of invoices.
    */
-  public function invoicesList(EntityInterface $entity) {
+  public function invoicesList(RouteMatchInterface $route_match) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
     // Initialize the Recurly client with the site-wide settings.
     if (!recurly_client_initialize()) {
       return ['#markup' => $this->t('Could not initialize the Recurly client.')];
@@ -54,12 +66,18 @@ class RecurlyInvoicesController extends ControllerBase {
   /**
    * Retrieve a single specified entity.
    *
-   * @param EntityInterface $entity
-   *   The entity associated with Recurly subscriptions; most typically a user.
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   A RouteMatch object.
+   *   Contains information about the route and the entity being acted on.
    * @param string $invoice_number
    *   A Recurly invoice UUID.
+   *
+   * @return array
+   *   Returns a render array for an invoice.
    */
-  public function getInvoice(EntityInterface $entity, $invoice_number) {
+  public function getInvoice(RouteMatchInterface $route_match, $invoice_number) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
     // Initialize the Recurly client with the site-wide settings.
     if (!recurly_client_initialize()) {
       return ['#markup' => $this->t('Could not initialize the Recurly client.')];
@@ -121,12 +139,15 @@ class RecurlyInvoicesController extends ControllerBase {
   /**
    * Deliver an invoice PDF file from Recurly.com.
    *
-   * @param EntityInterface $entity
-   *   The entity associated with Recurly subscriptions; most typically a user.
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   A RouteMatch object.
+   *   Contains information about the route and the entity being acted on.
    * @param string $invoice_number
    *   A Recurly invoice UUID.
    */
-  public function getInvoicePdf(EntityInterface $entity, $invoice_number) {
+  public function getInvoicePdf(RouteMatchInterface $route_match, $invoice_number) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
     // Initialize the Recurly client with the site-wide settings.
     if (!recurly_client_initialize()) {
       return ['#markup' => $this->t('Could not initialize the Recurly client.')];
diff --git a/src/Controller/RecurlyManageSubscriptionController.php b/src/Controller/RecurlyManageSubscriptionController.php
index 6b5105f..f4daca7 100644
--- a/src/Controller/RecurlyManageSubscriptionController.php
+++ b/src/Controller/RecurlyManageSubscriptionController.php
@@ -17,11 +17,18 @@ class RecurlyManageSubscriptionController extends ControllerBase {
 
   /**
    * Redirects a Recurly account code subscription management page.
+   *
+   * @param string $account_code
+   *   The account code in the recurly_account table.
+   *
+   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   *   A redirect response object that may be returned by the controller.
    */
-  function subscriptionRedirect($account_code) {
+  public function subscriptionRedirect($account_code) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
     $account = recurly_account_load(['account_code' => $account_code], TRUE);
     if ($account) {
-      return $this->redirect('recurly.subscription_list', ['entity' => $account->entity_id]);
+      return $this->redirect("entity.$entity_type_id.recurly_signup", [$entity_type_id => $account->entity_id]);
     }
     else {
       throw new NotFoundHttpException();
diff --git a/src/Controller/RecurlySubscriptionCancelController.php b/src/Controller/RecurlySubscriptionCancelController.php
index e729f7a..9ecd9a4 100644
--- a/src/Controller/RecurlySubscriptionCancelController.php
+++ b/src/Controller/RecurlySubscriptionCancelController.php
@@ -9,6 +9,8 @@ namespace Drupal\recurly\Controller;
 
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Url;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 
 /**
@@ -19,13 +21,20 @@ class RecurlySubscriptionCancelController extends ControllerBase {
   /**
    * Cancel the specified subscription.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   *   The entity whose subscription is being cancelled.
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   A RouteMatch object.
+   *   Contains information about the route and the entity being acted on.
    * @param string $subscription_id
    *   The UUID of the current subscription if changing the plan on an existing
    *   subscription.
+   *
+   * @return mixed
+   *   Returns \Drupal\Core\Form\FormBuilderInterface or a string.
    */
-  public function subscriptionCancel(EntityInterface $entity, $subscription_id) {
+  public function subscriptionCancel(RouteMatchInterface $route_match, $subscription_id) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
+
     // Initialize the Recurly client with the site-wide settings.
     if (!recurly_client_initialize()) {
       return ['#markup' => $this->t('Could not initialize the Recurly client.')];
diff --git a/src/Controller/RecurlySubscriptionChangeController.php b/src/Controller/RecurlySubscriptionChangeController.php
index 3b03690..8c488e2 100644
--- a/src/Controller/RecurlySubscriptionChangeController.php
+++ b/src/Controller/RecurlySubscriptionChangeController.php
@@ -9,6 +9,8 @@ namespace Drupal\recurly\Controller;
 
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Url;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 
 /**
@@ -17,17 +19,20 @@ use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 class RecurlySubscriptionChangeController extends ControllerBase {
 
   /**
-   * Change the existing to the specified subscription
+   * Change the existing to the specified subscription.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   *   The entity whose subscription is being changed.
-   * @param string $subscription_id
-   *   The UUID of the current subscription if changing the plan on an existing
-   *   subscription.
-   * @param string $new_plan_code
-   *   The plan code for the plan the user is changing to.
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   A RouteMatch object.
+   *   Contains information about the route and the entity being acted on.
+   *
+   * @return mixed
+   *   Returns \Drupal\Core\Form\FormBuilderInterface or a string.
    */
-  public function changePlan(EntityInterface $entity, $subscription_id, $new_plan_code) {
+  public function changePlan(RouteMatchInterface $route_match) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
+    $subscription_id = $route_match->getParameter('subscription_id');
+    $new_plan_code = $route_match->getParameter('new_plan_code');
     // Initialize the Recurly client with the site-wide settings.
     if (!recurly_client_initialize()) {
       return ['#markup' => $this->t('Could not initialize the Recurly client.')];
diff --git a/src/Controller/RecurlySubscriptionListController.php b/src/Controller/RecurlySubscriptionListController.php
index 4a22a6e..1f7f940 100644
--- a/src/Controller/RecurlySubscriptionListController.php
+++ b/src/Controller/RecurlySubscriptionListController.php
@@ -10,6 +10,11 @@ namespace Drupal\recurly\Controller;
 use Drupal\Component\Utility\SafeMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Field;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Url;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 
 /**
@@ -20,13 +25,16 @@ class RecurlySubscriptionListController extends ControllerBase {
   /**
    * Route title callback.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   *   The entity whose subscriptons should be listed.
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   A RouteMatch object.
+   *   Contains information about the route and the entity being acted on.
    *
    * @return array
    *   Recurly subscription details or a no-results message as a render array.
    */
-  public function subscriptionList(EntityInterface $entity) {
+  public function subscriptionList(RouteMatchInterface $route_match) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
     $subscriptions = [];
     // Initialize the Recurly client with the site-wide settings.
     if (!recurly_client_initialize()) {
@@ -142,7 +150,7 @@ class RecurlySubscriptionListController extends ControllerBase {
 
     // If the user doesn't have any active subscriptions, redirect to signup.
     if (count(\Drupal\Core\Render\Element::children($subscriptions['subscriptions'])) === 0) {
-      return $this->redirect('recurly.subscription_signup', ['entity' => $entity->id()]);
+      return $this->redirect('recurly_signup', ['entity' => $entity->id()]);
     }
 
     return $subscriptions;
diff --git a/src/Controller/RecurlySubscriptionReactivateController.php b/src/Controller/RecurlySubscriptionReactivateController.php
index c33969b..33db43e 100644
--- a/src/Controller/RecurlySubscriptionReactivateController.php
+++ b/src/Controller/RecurlySubscriptionReactivateController.php
@@ -9,6 +9,8 @@ namespace Drupal\recurly\Controller;
 
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Url;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 
 /**
@@ -24,7 +26,9 @@ class RecurlySubscriptionReactivateController extends ControllerBase {
    * @param string $subscription_id
    *   The UUID of the subscription to reactivate.
    */
-  public function reactivateSubscription(EntityInterface $entity, $subscription_id = 'latest') {
+  public function reactivateSubscription(RouteMatchInterface $route_match, $subscription_id = 'latest') {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
     // Initialize the Recurly client with the site-wide settings.
     if (!recurly_client_initialize()) {
       return ['#markup' => $this->t('Could not initialize the Recurly client.')];
@@ -59,7 +63,7 @@ class RecurlySubscriptionReactivateController extends ControllerBase {
       return;
     }
 
-    return $this->redirect('recurly.subscription_list', ['entity' => $account->entity_id]);
+    return $this->redirect("entity.$entity_type.recurly_subscriptionlist", [$entity_type_id => $entity->id()]);
   }
 
 }
diff --git a/src/Controller/RecurlySubscriptionSelectPlanController.php b/src/Controller/RecurlySubscriptionSelectPlanController.php
index 9044717..2869d6f 100644
--- a/src/Controller/RecurlySubscriptionSelectPlanController.php
+++ b/src/Controller/RecurlySubscriptionSelectPlanController.php
@@ -7,8 +7,15 @@
 
 namespace Drupal\recurly\Controller;
 
+use Drupal\Component\Utility\SafeMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Field;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Url;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
+use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 
 /**
  * Recurly select plan controller.
@@ -25,15 +32,18 @@ class RecurlySubscriptionSelectPlanController extends ControllerBase {
    * This method is used both for new subscriptions and for updating existing
    * subscriptions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   *   The entity whose subscription is being changed.
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   A RouteMatch object.
+   *   Contains the route and the entity subscription is being changed.
    * @param string $currency
    *   If this is a new subscription, the currency to be used.
    * @param string $subscription_id
    *   The UUID of the current subscription if changing the plan on an existing
    *   subscription.
    */
-  public function planSelect(EntityInterface $entity, $currency = NULL, $subscription_id = NULL) {
+  public function planSelect(RouteMatchInterface $route_match, $currency = NULL, $subscription_id = NULL) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
     $entity_type = $entity->getEntityType()->getLowercaseLabel();
     $content = $entity ? $entity->label() : $this->t('No corresponding entity loaded!');
 
diff --git a/src/Form/RecurlyRedeemCouponForm.php b/src/Form/RecurlyRedeemCouponForm.php
index 9db1bc5..8f0d28c 100644
--- a/src/Form/RecurlyRedeemCouponForm.php
+++ b/src/Form/RecurlyRedeemCouponForm.php
@@ -9,6 +9,7 @@ namespace Drupal\recurly\Form;
 
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
 
 /**
  * Recurly redeem coupon form.
@@ -25,7 +26,9 @@ class RecurlyRedeemCouponForm extends FormBase {
   /**
    * {@inheritdoc}
    */
-  public function buildForm(array $form, FormStateInterface $form_state, $entity = NULL) {
+  public function buildForm(array $form, FormStateInterface $form_state, RouteMatchInterface $route_match = NULL) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity = $route_match->getParameter($entity_type_id);
     $entity_type = $entity->getEntityType()->getLowercaseLabel();
     $form['#entity_type'] = $entity_type;
     $form['#entity'] = $entity;
diff --git a/src/Form/RecurlySubscriptionCancelConfirmForm.php b/src/Form/RecurlySubscriptionCancelConfirmForm.php
index 88469bc..3eff6dd 100644
--- a/src/Form/RecurlySubscriptionCancelConfirmForm.php
+++ b/src/Form/RecurlySubscriptionCancelConfirmForm.php
@@ -9,6 +9,8 @@ namespace Drupal\recurly\Form;
 
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Url;
 
 /**
  * Recurly subscription cancel form controller.
@@ -128,7 +130,7 @@ class RecurlySubscriptionCancelConfirmForm extends FormBase {
     $form['actions']['cancel'] = [
       '#type' => 'link',
       '#title' => $this->t('Cancel'),
-      '#url' => \Drupal\Core\Url::fromRoute('recurly.subscription_list', ['entity' => $entity->id()]),
+      '#url' => \Drupal\Core\Url::fromRoute("entity.$entity_type.recurly_subscriptionlist", [$entity_type => $entity->id()]),
     ];
 
     return $form;
@@ -150,7 +152,7 @@ class RecurlySubscriptionCancelConfirmForm extends FormBase {
           '@plan' => $subscription->plan->name,
           '@date' => recurly_format_date($subscription->current_period_ends_at),
         ]));
-        return $this->redirect('recurly.subscription_list', ['entity' => $entity->id()]);
+        $form_state->setRedirect("entity.$entity_type.recurly_subscriptionlist", [$entity_type => $entity->id()]);
       }
       catch (\Recurly_Error $e) {
         drupal_set_message($this->t('The plan could not be canceled because the billing service encountered an error.'), 'error');
@@ -173,7 +175,7 @@ class RecurlySubscriptionCancelConfirmForm extends FormBase {
             break;
         }
         drupal_set_message($this->t('Plan @plan terminated!', ['@plan' => $subscription->plan->name]));
-        $form_state->setRedirect('recurly.subscription_list', ['entity' => $entity->id()]);
+        $form_state->setRedirect("entity.$entity_type.recurly_subscriptionlist", [$entity_type => $entity->id()]);
       }
       catch (\Recurly_Error $e) {
         drupal_set_message($this->t('The plan could not be terminated because the billing service encountered an error: "@message"', ['@message' => $e->getMessage()]), 'error');
diff --git a/src/Form/RecurlySubscriptionChangeConfirmForm.php b/src/Form/RecurlySubscriptionChangeConfirmForm.php
index 1c23876..c3b5ea0 100644
--- a/src/Form/RecurlySubscriptionChangeConfirmForm.php
+++ b/src/Form/RecurlySubscriptionChangeConfirmForm.php
@@ -91,7 +91,7 @@ class RecurlySubscriptionChangeConfirmForm extends FormBase {
     $form['actions']['cancel'] = [
       '#type' => 'link',
       '#title' => $this->t('Cancel'),
-      '#url' => \Drupal\Core\Url::fromRoute('recurly.subscription_change', ['entity' => $entity->id()]),
+      '#url' => \Drupal\Core\Url::fromRoute("entity.$entity_type.recurly_change", [$entity_type => $entity->id()]),
     ];
     return $form;
   }
@@ -126,7 +126,7 @@ class RecurlySubscriptionChangeConfirmForm extends FormBase {
       $message .= ' ' . $this->t('Changes will become active starting <strong>@date</strong>.', ['@date' => recurly_format_date($subscription->current_period_ends_at)]);
     }
     drupal_set_message($message);
-    $form_state->setRedirect('recurly.subscription_list', ['entity' => $entity->id()]);
+    $form_state->setRedirect("entity.$entity_type.recurly_subscriptionlist", [$entity_type => $entity->id()]);
   }
 
 }
diff --git a/src/Plugin/Derivative/RecurlyLocalTask.php b/src/Plugin/Derivative/RecurlyLocalTask.php
new file mode 100644
index 0000000..261a1af
--- /dev/null
+++ b/src/Plugin/Derivative/RecurlyLocalTask.php
@@ -0,0 +1,123 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\recurly\Plugin\Derivative\RecurlyLocalTask.
+ */
+
+namespace Drupal\recurly\Plugin\Derivative;
+
+use Drupal\Component\Plugin\Derivative\DeriverBase;
+use Drupal\Core\Entity\EntityManagerInterface;
+use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\Core\StringTranslation\TranslationInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Provides local task definitions for all entity bundles.
+ */
+class RecurlyLocalTask extends DeriverBase implements ContainerDeriverInterface {
+
+  use StringTranslationTrait;
+
+  /**
+   * The entity manager.
+   *
+   * @var \Drupal\Core\Entity\EntityManagerInterface
+   */
+  protected $entityManager;
+
+  /**
+   * Creates a RecurlyLocalTask object.
+   *
+   * @param \Drupal\Core\Entity\EntityManagerInterface $entity_manager
+   *   The entity manager.
+   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   *   The translation manager.
+   */
+  public function __construct(EntityManagerInterface $entity_manager, TranslationInterface $string_translation) {
+    $this->entityManager = $entity_manager;
+    $this->stringTranslation = $string_translation;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, $base_plugin_id) {
+    return new static(
+      $container->get('entity.manager'),
+      $container->get('string_translation')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDerivativeDefinitions($base_plugin_definition) {
+    // We are creating our local menu tasks here.
+    // $base_plugin_definition contains our base class(\Drupal\Core\Menu\LocalTaskDefault),
+    // the deriver class(this), provider(recurly) and id(recurly.entities).
+    // See recurly.links.task.yml.
+    $this->derivatives = array();
+    // Get the entity type associated with recurly.
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    // Get all the plugins available to the entity (block, menu, user, etc.).
+    $entity_manager_definitions = $this->entityManager->getDefinitions();
+    // Pull our entity type.
+    $entity_type = $entity_manager_definitions[$entity_type_id];
+    // Get the canonical path for this entity and recurly.
+    $has_canonical_path = $entity_type->hasLinkTemplate('recurly-subscriptionlist');
+    // If we have the canonical path for this entity type, add tabs.
+    if ($has_canonical_path) {
+      $this->derivatives["$entity_type_id.recurly_tab"] = array(
+        'route_name' => "entity.$entity_type_id.recurly_subscriptionlist",
+        'title' => $this->t('Subscription'),
+        'base_route' => "entity.$entity_type_id.canonical",
+        'weight' => 100,
+      );
+      $this->derivatives["$entity_type_id.recurly_signup_tab"] = array(
+        'route_name' => "entity.$entity_type_id.recurly_signup",
+        'title' => $this->t('Signup'),
+        'parent_id' => "recurly.entities:$entity_type_id.recurly_tab",
+        'weight' => 50,
+      );
+      $this->derivatives["$entity_type_id.recurly_change_tab"] = array(
+        'route_name' => "entity.$entity_type_id.recurly_change",
+        'weight' => 200,
+        'title' => $this->t('Change plan'),
+        'parent_id' => "recurly.entities:$entity_type_id.recurly_tab",
+      );
+      $this->derivatives["$entity_type_id.invoices_tab"] = array(
+        'route_name' => "entity.$entity_type_id.recurly_invoices",
+        'title' => $this->t('Invoices'),
+        'parent_id' => "recurly.entities:$entity_type_id.recurly_tab",
+        'weight' => 300,
+      );
+      $this->derivatives["$entity_type_id.coupon_tab"] = array(
+        'route_name' => "entity.$entity_type_id.recurly_coupon",
+        'title' => $this->t('Redeem Coupon'),
+        'parent_id' => "recurly.entities:$entity_type_id.recurly_tab",
+        'weight' => 400,
+      );
+      $this->derivatives["$entity_type_id.cancel_tab"] = array(
+        'route_name' => "entity.$entity_type_id.recurly_cancellatest",
+        'title' => $this->t('Cancel'),
+        'parent_id' => "recurly.entities:$entity_type_id.recurly_tab",
+        'weight' => 500,
+      );
+      $this->derivatives["$entity_type_id.reactivate_tab"] = array(
+        'route_name' => "entity.$entity_type_id.recurly_reactivatelatest",
+        'title' => $this->t('Reactivate'),
+        'parent_id' => "recurly.entities:$entity_type_id.recurly_tab",
+        'weight' => 500,
+      );
+    }
+    // Add the tabs to $base_plugin_definition.
+    foreach ($this->derivatives as &$entry) {
+      $entry += $base_plugin_definition;
+    }
+    return $this->derivatives;
+  }
+
+}
diff --git a/src/Routing/RecurlyRouteSubscriber.php b/src/Routing/RecurlyRouteSubscriber.php
new file mode 100644
index 0000000..4d5e338
--- /dev/null
+++ b/src/Routing/RecurlyRouteSubscriber.php
@@ -0,0 +1,297 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\recurly\Routing\RecurlyRouteSubscriber.
+ */
+
+namespace Drupal\recurly\Routing;
+
+use Drupal\Core\Entity\EntityManagerInterface;
+use Drupal\Core\Routing\RouteSubscriberBase;
+use Drupal\Core\Routing\RoutingEvents;
+use Symfony\Component\Routing\Route;
+use Symfony\Component\Routing\RouteCollection;
+
+/**
+ * Subscriber for Recurly routes.
+ */
+class RecurlyRouteSubscriber extends RouteSubscriberBase {
+
+  /**
+   * The entity manager service.
+   *
+   * @var \Drupal\Core\Entity\EntityManagerInterface
+   */
+  protected $entityManager;
+
+  /**
+   * Constructs a new RouteSubscriber object.
+   *
+   * @param \Drupal\Core\Entity\EntityManagerInterface $entity_manager
+   *   The entity type manager.
+   */
+  public function __construct(EntityManagerInterface $entity_manager) {
+    $this->entityManager = $entity_manager;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function alterRoutes(RouteCollection $collection) {
+    $entity_type_id = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
+    $entity_manager_definitions = $this->entityManager->getDefinitions();
+    $entity_type = $entity_manager_definitions[$entity_type_id];
+    if ($entity_type->hasLinkTemplate('recurly-subscriptionlist') || $entity_type->hasLinkTemplate('recurly-signup') || $entity_type->hasLinkTemplate('recurly-change') || $entity_type->hasLinkTemplate('recurly-billing')) {
+
+      $options = array(
+        '_admin_route' => TRUE,
+        '_recurly_entity_type_id' => $entity_type_id,
+        'parameters' => array(
+          $entity_type_id => array(
+            'type' => 'entity:' . $entity_type_id,
+          ),
+        ),
+      );
+
+      if ($recurly_subscriptionlist = $entity_type->getLinkTemplate('recurly-subscriptionlist')) {
+        // Create route.
+        $route = new Route(
+          $recurly_subscriptionlist,
+          array(
+            '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionListController::subscriptionList',
+            '_title' => \Drupal::config('recurly.settings')->get('recurly_subscription_max') == 1 ? 'Subscription Summary' : 'Subscription List',
+          ),
+          array(
+            '_permission' => 'manage recurly subscription',
+            '_entity_access' => "$entity_type_id.update",
+            '_access_check_recurly_user' => 'TRUE',
+            '_access_check_recurly_list' => 'TRUE',
+          ),
+          $options
+        );
+        // Give it a name and add to the route collection.
+        $collection->add("entity.$entity_type_id.recurly_subscriptionlist", $route);
+      }
+
+      if ($recurly_change = $entity_type->getLinkTemplate('recurly-change')) {
+        $route = new Route(
+          $recurly_change,
+          array(
+            '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionSelectPlanController::planSelect',
+            '_title' => 'Change plan',
+            'subscription_id' => 'latest',
+            'operation' => 'change_plan_latest',
+          ),
+          array(
+            '_entity_access' => "$entity_type_id.update",
+            '_access_check_recurly_user' => 'TRUE',
+            '_access_check_recurly_default' => 'TRUE',
+          ),
+          $options
+        );
+
+        $collection->add("entity.$entity_type_id.recurly_change", $route);
+      }
+
+      if ($recurly_planchange = $entity_type->getLinkTemplate('recurly-planchange')) {
+        $route = new Route(
+          $recurly_planchange,
+          array(
+            '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionChangeController::changePlan',
+            '_title' => 'Change subscription',
+            'operation' => 'change_plan',
+          ),
+          array(
+            '_entity_access' => "$entity_type_id.update",
+            '_access_check_recurly_user' => 'TRUE',
+            '_access_check_recurly_default' => 'TRUE',
+          ),
+          $options
+        );
+
+        $collection->add("entity.$entity_type_id.recurly_planchange", $route);
+      }
+
+      if ($recurly_signup = $entity_type->getLinkTemplate('recurly-signup')) {
+        $route = new Route(
+          $recurly_signup,
+          array(
+            '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionSelectPlanController::planSelect',
+            '_title' => \Drupal::config('recurly.settings')->get('recurly_subscription_max') == 1 ? 'Signup' : 'Add plan',
+            'operation' => 'select_plan',
+          ),
+          array(
+            '_entity_access' => "$entity_type_id.update",
+            '_access_check_recurly_user' => 'TRUE',
+            '_access_check_recurly_default' => 'TRUE',
+          ),
+          $options
+        );
+        // Give it a name and add it to the route collection.
+        $collection->add("entity.$entity_type_id.recurly_signup", $route);
+      }
+      if ($recurly_cancel_latest = $entity_type->getLinkTemplate('recurly-cancellatest')) {
+        $route = new Route(
+          $recurly_cancel_latest,
+          array(
+            '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionCancelController::subscriptionCancel',
+            '_title' => 'Cancel subscription',
+            'subscription_id' => 'latest',
+            'operation' => 'cancel_latest',
+          ),
+          array(
+            '_entity_access' => "$entity_type_id.update",
+            '_access_check_recurly_user' => 'TRUE',
+            '_access_check_recurly_default' => 'TRUE',
+          ),
+          $options
+        );
+
+        $collection->add("entity.$entity_type_id.recurly_cancellatest", $route);
+      }
+      if ($recurly_cancel = $entity_type->getLinkTemplate('recurly-cancel')) {
+        $route = new Route(
+          $recurly_cancel,
+          array(
+            '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionCancelController::subscriptionCancel',
+            '_title' => 'Cancel subscription',
+            'subscription_id' => 'latest',
+            'operation' => 'cancel',
+          ),
+          array(
+            '_entity_access' => "$entity_type_id.update",
+            '_access_check_recurly_user' => 'TRUE',
+            '_access_check_recurly_default' => 'TRUE',
+          ),
+          $options
+        );
+
+        $collection->add("entity.$entity_type_id.recurly_cancel", $route);
+      }
+
+      if ($recurly_reactivate_latest = $entity_type->getLinkTemplate('recurly-reactivatelatest')) {
+        $route = new Route(
+          $recurly_reactivate_latest,
+          array(
+            '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionReactivateController::reactivateSubscription',
+            '_title' => 'Reactivate',
+            'operation' => 'reactivate_latest',
+          ),
+          array(
+            '_entity_access' => "$entity_type_id.update",
+            '_access_check_recurly_user' => 'TRUE',
+            '_access_check_recurly_default' => 'TRUE',
+          ),
+          $options
+        );
+
+        $collection->add("entity.$entity_type_id.recurly_reactivatelatest", $route);
+      }
+      if ($recurly_reactivate = $entity_type->getLinkTemplate('recurly-reactivate')) {
+        $route = new Route(
+          $recurly_reactivate,
+          array(
+            '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionReactivateController::reactivateSubscription',
+            '_title' => 'Reactivate',
+            'operation' => 'reactivate',
+          ),
+          array(
+            '_entity_access' => "$entity_type_id.update",
+            '_access_check_recurly_user' => 'TRUE',
+            '_access_check_recurly_default' => 'TRUE',
+          ),
+          $options
+        );
+
+        $collection->add("entity.$entity_type_id.recurly_cancel", $route);
+      }
+
+      // Invoice routes.
+      if ($recurly_invoices = $entity_type->getLinkTemplate('recurly-invoices')) {
+        $route = new Route(
+          $recurly_invoices,
+          array(
+            '_controller' => '\Drupal\recurly\Controller\RecurlyInvoicesController::invoicesList',
+            '_title' => 'Invoices',
+            'operation' => 'invoices',
+          ),
+          array(
+            '_entity_access' => "$entity_type_id.update",
+            '_access_check_recurly_user' => 'TRUE',
+            '_access_check_recurly_default' => 'TRUE',
+          ),
+          $options
+        );
+
+        $collection->add("entity.$entity_type_id.recurly_invoices", $route);
+      }
+      if ($recurly_invoice = $entity_type->getLinkTemplate('recurly-invoice')) {
+        $route = new Route(
+          $recurly_invoice,
+          array(
+            '_controller' => '\Drupal\recurly\Controller\RecurlyInvoicesController::getInvoice',
+            '_title' => 'Invoice',
+            'operation' => 'invoices',
+          ),
+          array(
+            '_entity_access' => "$entity_type_id.update",
+            '_access_check_recurly_user' => 'TRUE',
+            '_access_check_recurly_default' => 'TRUE',
+          ),
+          $options
+        );
+
+        $collection->add("entity.$entity_type_id.recurly_invoice", $route);
+      }
+      if ($recurly_invoice_pdf = $entity_type->getLinkTemplate('recurly-invoicepdf')) {
+        $route = new Route(
+          $recurly_invoice_pdf,
+          array(
+            '_controller' => '\Drupal\recurly\Controller\RecurlyInvoicesController::getInvoicePdf',
+            '_title' => 'Invoice PDF',
+            'operation' => 'invoices',
+          ),
+          array(
+            '_entity_access' => "$entity_type_id.update",
+            '_access_check_recurly_user' => 'TRUE',
+            '_access_check_recurly_default' => 'TRUE',
+          ),
+          $options
+        );
+
+        $collection->add("entity.$entity_type_id.recurly_invoicepdf", $route);
+      }
+      if (\Drupal::config('recurly.settings')->get('recurly_coupon_page') ?: 1) {
+        if ($recurly_coupon = $entity_type->getLinkTemplate('recurly-coupon')) {
+          $route = new Route(
+            $recurly_coupon,
+            array(
+              '_form' => '\Drupal\recurly\Form\RecurlyRedeemCouponForm',
+              '_title' => 'Redeem coupon',
+              'operation' => 'update',
+            ),
+            array(
+              '_entity_access' => "$entity_type_id.update",
+              '_access_check_recurly_user' => 'TRUE',
+              '_access_check_recurly_default' => 'TRUE',
+            ),
+            $options
+          );
+
+          $collection->add("entity.$entity_type_id.recurly_coupon", $route);
+        }
+      }
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getSubscribedEvents() {
+    $events = parent::getSubscribedEvents();
+    $events[RoutingEvents::ALTER] = array('onAlterRoutes', 100);
+    return $events;
+  }
+
+}
diff --git a/src/Routing/RecurlySubscriptionRoutes.php b/src/Routing/RecurlySubscriptionRoutes.php
deleted file mode 100644
index eb223ea..0000000
--- a/src/Routing/RecurlySubscriptionRoutes.php
+++ /dev/null
@@ -1,221 +0,0 @@
-<?php
-
-/**
- * @file
- * Contains \Drupal\recurly\Routing\RecurlySubscriptionRoutes.
- */
-
-namespace Drupal\recurly\Routing;
-
-use Symfony\Component\Routing\Route;
-
-/**
- * Defines dynamic routes.
- */
-class RecurlySubscriptionRoutes {
-
-  /**
-   * Define custom routes.
-   *
-   * The below routes are defined here, instead of in recurly.routing.yml,
-   * since they depend on logic in PHP and can not be defined in YAML.
-   */
-  public function routes() {
-    // Find out what kind of entity we're dealing with.
-    $entity_type = \Drupal::config('recurly.settings')->get('recurly_entity_type') ?: 'user';
-
-    // Add and configure the new route.
-    $routes = [];
-    $routes['recurly.subscription_list'] = new Route(
-      "/$entity_type/{entity}/subscription",
-      [
-        '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionListController::subscriptionList',
-        '_title' => \Drupal::config('recurly.settings')->get('recurly_subscription_max') == 1 ? 'Subscription Summary' : 'Subscription List',
-      ],
-      [
-        '_entity_access' => 'entity.update',
-        '_access_check_recurly_user' => 'TRUE',
-        '_access_check_recurly_list' => 'TRUE',
-      ],
-      ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-    );
-    $routes['recurly.subscription_signup'] = new Route(
-      "/$entity_type/{entity}/subscription/signup",
-      [
-        '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionSelectPlanController::planSelect',
-        '_title' => \Drupal::config('recurly.settings')->get('recurly_subscription_max') == 1 ? 'Signup' : 'Add plan',
-        'operation' => 'select_plan',
-      ],
-      [
-        '_entity_access' => 'entity.update',
-        '_access_check_recurly_user' => 'TRUE',
-        '_access_check_recurly_default' => 'TRUE',
-      ],
-      ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-    );
-    $routes['recurly.subscription_plan_select'] = new Route(
-      "/$entity_type/{entity}/subscription/change",
-      [
-        '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionSelectPlanController::planSelect',
-        '_title' => 'Change Plan',
-        'subscription_id' => 'latest',
-        'operation' => 'change_plan_latest',
-      ],
-      [
-        '_entity_access' => 'entity.update',
-        '_access_check_recurly_user' => 'TRUE',
-        '_access_check_recurly_default' => 'TRUE',
-      ],
-      ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-    );
-
-    // Cancel routes.
-    $routes['recurly.subscription_cancel_latest'] = new Route(
-      "$entity_type/{entity}/subscription/cancel",
-      [
-        '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionCancelController::subscriptionCancel',
-        '_title' => 'Cancel subscription',
-        'subscription_id' => 'latest',
-        'operation' => 'cancel_latest',
-      ],
-      [
-        '_entity_access' => 'entity.update',
-        '_access_check_recurly_user' => 'TRUE',
-        '_access_check_recurly_default' => 'TRUE',
-      ],
-      ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-    );
-    $routes['recurly.subscription_cancel'] = new Route(
-      "$entity_type/{entity}/subscription/id/{subscription_id}/cancel",
-      [
-        '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionCancelController::subscriptionCancel',
-        '_title' => 'Cancel subscription',
-        'operation' => 'cancel',
-      ],
-      [
-        '_entity_access' => 'entity.update',
-        '_access_check_recurly_user' => 'TRUE',
-        '_access_check_recurly_default' => 'TRUE',
-      ],
-      ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-    );
-
-    // Change routes.
-    $routes['recurly.subscription_change'] = new Route(
-      "$entity_type/{entity}/subscription/change",
-      [
-        '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionSelectPlanController::planSelect',
-        '_title' => 'Change plan',
-        'subscription_id' => 'latest',
-        'operation' => 'change_plan_latest',
-      ],
-      [
-        '_entity_access' => 'entity.update',
-        '_access_check_recurly_user' => 'TRUE',
-        '_access_check_recurly_default' => 'TRUE',
-      ],
-      ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-    );
-    $routes['recurly.subscription_plan_change'] = new Route(
-      "$entity_type/{entity}/subscription/id/{subscription_id}/change/{new_plan_code}",
-      [
-        '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionChangeController::changePlan',
-        '_title' => 'Change subscription',
-        'operation' => 'change_plan',
-      ],
-      [
-        '_entity_access' => 'entity.update',
-        '_access_check_recurly_user' => 'TRUE',
-        '_access_check_recurly_default' => 'TRUE',
-      ],
-      ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-    );
-
-    // Invoice routes.
-    $routes['recurly.subscription_invoices'] = new Route(
-      "$entity_type/{entity}/subscription/invoices",
-      [
-        '_controller' => '\Drupal\recurly\Controller\RecurlyInvoicesController::invoicesList',
-        '_title' => 'Invoices',
-        'operation' => 'invoices',
-      ],
-      // @FIXME: Add permission check for access to the specified entity.
-      ['_access_check_recurly_user' => 'TRUE'],
-      ['_access_check_recurly_default' => 'TRUE'],
-      ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-    );
-    $routes['recurly.subscription_invoice'] = new Route(
-      "$entity_type/{entity}/subscription/invoices/{invoice_number}",
-      [
-        '_controller' => '\Drupal\recurly\Controller\RecurlyInvoicesController::getInvoice',
-        '_title' => 'Invoice',
-        'operation' => 'invoices',
-      ],
-      // @FIXME: Add permission check for access to the specified entity.
-      ['_access_check_recurly_user' => 'TRUE'],
-      ['_access_check_recurly_default' => 'TRUE'],
-      ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-    );
-    $routes['recurly.subscription_invoice_pdf'] = new Route(
-      "$entity_type/{entity}/subscription/invoices/{invoice_number}/pdf",
-      [
-        '_controller' => '\Drupal\recurly\Controller\RecurlyInvoicesController::getInvoicePdf',
-        '_title' => 'Invoice PDF',
-        'operation' => 'invoices',
-      ],
-      // @FIXME: Add permission check for access to the specified entity.
-      ['_access_check_recurly_user' => 'TRUE'],
-      ['_access_check_recurly_default' => 'TRUE'],
-      ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-    );
-
-    // Reactivate routes.
-    $routes['recurly.subscription_reactivate_latest'] = new Route(
-      "$entity_type/{entity}/subscription/reactivate",
-      [
-        '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionReactivateController::reactivateSubscription',
-        '_title' => 'Reactivate',
-        'operation' => 'reactivate_latest',
-      ],
-      [
-        '_entity_access' => 'entity.update',
-        '_access_check_recurly_user' => 'TRUE',
-        '_access_check_recurly_default' => 'TRUE',
-      ],
-      ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-    );
-    $routes['recurly.subscription_reactivate'] = new Route(
-      "$entity_type/{entity}/subscription/id/{subscription_id}/reactivate",
-      [
-        '_controller' => '\Drupal\recurly\Controller\RecurlySubscriptionReactivateController::reactivateSubscription',
-        '_title' => 'Reactivate',
-        'operation' => 'reactivate',
-      ],
-      [
-        '_entity_access' => 'entity.update',
-        '_access_check_recurly_user' => 'TRUE',
-        '_access_check_recurly_default' => 'TRUE',
-      ],
-      ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-    );
-
-    if (\Drupal::config('recurly.settings')->get('recurly_coupon_page') ?: 1) {
-      $routes['recurly.redeem_coupon'] = new Route(
-        "$entity_type/{entity}/subscription/redeem-coupon",
-        [
-          '_form' => '\Drupal\recurly\Form\RecurlyRedeemCouponForm',
-          '_title' => 'Redeem coupon',
-          'operation' => 'update',
-        ],
-        [
-          '_entity_access' => 'entity.update',
-          '_access_check_recurly_user' => 'TRUE',
-          '_access_check_recurly_default' => 'TRUE',
-        ],
-        ['parameters' => ['entity' => ['type' => 'entity:' . $entity_type]]]
-      );
-    }
-    return $routes;
-  }
-
-}
