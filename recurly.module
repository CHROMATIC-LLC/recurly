<?php

/**
 * @file
 * Uses Recurly's PHP client library to interact with their API and integrate it
 * with Drupal user accounts.
 */


/**
 * Implements hook_menu().
 */
function recurly_menu() {
  $items = array();

  $items['admin/config/services/recurly'] = array(
    'title' => 'Recurly',
    'description' => 'Configure your Recurly API settings and points of integration with Drupal.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recurly_settings_form'),
    'access arguments' => array('administer recurly'),
    'file' => 'includes/recurly.admin.inc',
  );
  $items['admin/config/services/recurly/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure your Recurly API settings and points of integration with Drupal.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/services/recurly/subscription-plans'] = array(
    'title' => 'Subscription plans',
    'description' => 'View a list of subscription plans defined in your Recurly account.',
    'page callback' => 'recurly_subscription_plans_overview',
    'access arguments' => array('administer recurly'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'file' => 'includes/recurly.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function recurly_permission() {
  $permissions = array(
    'administer recurly' => array(
      'title' => t('Administer Recurly'),
      'description' => t('Allows users to configure site-wide Recurly API settings and points of integration.'),
      'restrict access' => TRUE,
    ),
    'edit subscription plans' => array(
      'title' => t('Edit subscription plans'),
      'description' => t('Determines whether or not the user should see links to edit subscription plans at Recurly. Grants of this permission should coordinate with user permissions at Recurly.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_help().
 */
function recurly_help($path, $arg) {
  switch ($path) {
    case 'admin/config/services/recurly/subscription-plans':
      return '<p>' . t('The subscription plans below are defined for the Recurly account configured in your default account settings. Plans should be defined and updated at Recurly and are cached here for informational purposes only. Edit links and purchase links that may appear in the table redirect to Recurly.') . '</p>';
  }
}

/**
 * Initializes the Recurly API client with a given set of account settings.
 *
 * @param $settings
 *   An array of Recurly account settings including the following keys or NULL
 *   to use the site-wide account settings.
 *   - username: the API username to use
 *   - password: the API password for the given username
 *   - subdomain: the subdomain configured for your Recurly account.
 *   - environment: the current environment of the given account, either
 *     'sandbox' or 'production'.
 *
 * @return
 *   TRUE or FALSE indicating whether or not the client was initialized with the
 *   specified account settings.
 */
function recurly_client_initialize($settings = NULL) {
  $client = NULL;

  // If no settings array was given, use the default account settings.
  if (empty($settings)) {
    $settings = array(
      'username' => variable_get('recurly_api_username', ''),
      'password' => variable_get('recurly_api_password', ''),
      'subdomain' => variable_get('recurly_subdomain', ''),
      'environment' => variable_get('recurly_environment', 'sandbox'),
    );
  }

  // If we can find a path in the libraries directory to the Recurly PHP client
  // library...
  if (($path = libraries_get_path('recurly')) && file_exists($path . '/library/recurly.php')) {
    // Include the library files and configure authentication.
    require_once $path . '/library/recurly.php';
    RecurlyClient::SetAuth($settings['username'], $settings['password'], $settings['subdomain'], $settings['environment']);
  }
  else {
    watchdog('recurly', 'Could not find the Recurly PHP client library in sites/all/libraries/recurly.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  return TRUE;
}

/**
 * Saves an account record, optionally exporting the saved data to Recurly as a
 * new account or update request as necessary.
 *
 * @param $account
 *   The Recurly account object to save.
 * @param $uid
 *   The Drupal user ID the account is associated with.
 * @param $data
 *
 * @param $export
 *   Boolean indicating whether or not the saved account information should also
 *   be exported to Recurly by either creating a new account or updating an
 *   existing account based on the saved values using the Recurly API.
 *
 * @return
 *   FALSE on failure of either the local save or optional export or SAVED_NEW
 *   or SAVED_UPDATED indicating the type of query performed to save the account
 *   information locally.
 */
function recurly_account_save($account, $uid, $data = array(), $export = FALSE) {
  // First attempt to save the data at Recurly if specified. Failing an export
  // will prevent local data from being saved so you don't end up with a local
  // record that does not match a record at Recurly.
  if ($export) {
    // Check to see if the record already exists.
    $recurly_account = RecurlyAccount::getAccount($account->account_code);

    // If it does, then update the account.
    if (!empty($recurly_account)) {
      try {
        $account->update();
      }
      catch (Exception $e) {
        return FALSE;
      }
    }
    else {
      // Otherwise create it at Recurly now.
      try {
        $account->create();
      }
      catch (Exception $e) {
        return FALSE;
      }
    }
  }

  // Now attempt to update the record locally.
  $account->updated = REQUEST_TIME;

  // Generate an array of data to save.
  $fields = array(
    'first_name' => $account->first_name,
    'last_name' => $account->last_name,
    'company_name' => $account->company_name,
    'uid' => $uid,
    'updated' => REQUEST_TIME,
    'data' => serialize($data),
  );

  $rows_affected = db_update('recurly_account')
    ->fields($fields)
    ->condition('account_code', $account->account_code)
    ->execute();

  // If a row was affected, return the proper result code.
  if ($rows_affected > 0) {
    return SAVED_UPDATED;
  }

  // Add the account code to the fields array for an attempted insert.
  $fields['account_code'] = $account->account_code;
  $fields['data'] = $data;

  return drupal_write_record('recurly_account', $fields);
}

/**
 * Returns an array of subscription plan objects for the current account,
 * retrieving them from a local cache if possible.
 *
 * @param $reset_cache
 *   Boolean indicating whether or not to reset the subscription plan cache when
 *   retrieving plans.
 *
 * @return
 *   An array of subscription plan objects.
 */
function recurly_subscription_plans($reset_cache = FALSE) {
  // If we haven't specified a cache reset, attempt to retrieve plans from the
  // cache before getting them from Recurly.
  if (!$reset_cache) {
    $plans = cache_get('recurly-subscription-plans:' . RecurlyClient::$subdomain);

    // If plans were found, return them now.
    if (!empty($plans->data)) {
      return $plans->data;
    }
  }

  // Retrieve the subscription plans from Recurly.
  $plans = RecurlyPlan::getPlans();

  // If data was actually returned, cache it for the current subdomain.
  if (!empty($plans)) {
    cache_set('recurly-subscription-plans:' . RecurlyClient::$subdomain, $plans, 'cache', CACHE_TEMPORARY);
  }

  return $plans;
}

/**
 * Returns the base Recurly URL for the current account with an optional path
 * appended to it.
 */
function recurly_url($path = '') {
  // Generate the subdomain to use for the current account.
  $subdomain = RecurlyClient::$subdomain;

  // Add the sandbox suffix to the subdomain if the account is currently in the
  // snadbox environment.
  if (RecurlyClient::$environment == 'sandbox') {
    $subdomain .= '-test';
  }

  return url('https://' . $subdomain . '.recurly.com/' . $path);
}

/**
 * Returns an edit URL for a subscription plan at the current account.
 *
 * @param $plan
 *   The subscription plan object returned by the Recurly client.
 *
 * @return
 *   The URL for the plan's edit page at Recurly.
 */
function recurly_subscription_plan_edit_url($plan) {
  return recurly_url('company/plans/' . $plan->plan_code);
}

/**
 * Returns a Hosted Payment Page URL for the given subscription plan.
 *
 * @param $plan
 *   The subscription plan object returned by the Recurly client.
 * @param $settings
 *   An optional array of settings used to pre-populate the payment form.
 *   - first_name: the customer's first name
 *   - last_name: the customer's last name
 *   - email: the customer's e-mail address
 *
 * @return
 *   The URL for the plan's Hosted Payment Page at Recurly.
 */
function recurly_subscription_plan_purchase_url($plan, $settings = NULL) {
  $query = '';

  if (!empty($settings)) {
    $query = '?' . drupal_http_build_query($settings);
  }

  return recurly_url('subscribe/' . $plan->plan_code . $query);
}
