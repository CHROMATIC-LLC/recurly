<?php
/**
 * @file
 *
 * Integrates with Recurly to provide hosted links for Drupal user accounts.
 *
 * Enabling this module is not recommended if your site is using Commerce
 * Recurly or other modules that provide local management of Recurly accounts.
 */

/**
 * Implements hook_user_view().
 *
 * If enabled, adds Recurly account information and management links to user
 * profiles linked to accounts.
 */
function recurly_hosted_user_view($account, $view_mode, $langcode) {
  global $user;

  // If account display on user profiles is enabled, this is an authenticated
  // account, and the current user has access to view its account information...
  if ($account->uid && recurly_account_access('view', $account)) {
    // Initialize the Recurly client.
    recurly_client_initialize();

    // If the account is linked to a Recurly account...
    if ($recurly_account = recurly_account_load(array('uid' => $account->uid))) {
      // Add it to the content array.
      $account->content['recurly_account'] = array(
        '#type' => 'user_profile_category',
        '#title' => t('Subscription information'),
        '#weight' => 0,
      );

      // Build an account holder string based on available data.
      if (empty($recurly_account->company_name)) {
        $account_holder = t('@first_name @last_name', array('@first_name' => $recurly_account->first_name, '@last_name' => $recurly_account->last_name));
      }
      else {
        $account_holder = t('@first_name @last_name, @company_name', array('@first_name' => $recurly_account->first_name, '@last_name' => $recurly_account->last_name, '@company_name' => $recurly_account->company_name));
      }

      $account->content['recurly_account']['account_holder'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Account holder'),
        '#markup' => $account_holder,
      );

      // Add the account e-mail address if available.
      if (!empty($recurly_account->email)) {
        $account->content['recurly_account']['account_email'] = array(
          '#type' => 'user_profile_item',
          '#title' => t('Account e-mail address'),
          '#markup' => check_plain($recurly_account->email),
        );
      }

      // Tell the user if the account is closed.
      if ((empty($recurly_account->state) && $recurly_account->status == 'closed') ||
        (!empty($recurly_account->state) && $recurly_account->state == 'closed')) {
        $account->content['recurly_account']['account_closed'] = array(
          '#type' => 'user_profile_item',
          '#title' => t('Account status'),
          '#markup' => t('Our records indicate your account is closed. We are not currently billing your for any subscriptions.'),
        );
      }

      // Add an appropriate account edit link if the user has access.
      if (recurly_account_access('edit', $account)) {
        // Give administrators a link to the back end.
        if (user_access('administer recurly') || user_access('edit all recurly accounts')) {
          $account->content['recurly_account']['edit_account_link'] = array(
            '#type' => 'user_profile_item',
            '#title' => t('Administer account'),
            '#markup' => l(t('Edit this account at Recurly.'), recurly_hosted_account_edit_url($recurly_account)),
          );
        }

        // If Hosted Payment Pages are enabled, give users a link to their own
        // account management page if their account is active.
        if ($user->uid == $account->uid && $recurly_account->state == 'active') {
          // Give users manage links for their own accounts.
          $account->content['recurly_account']['manage_account_link'] = array(
            '#type' => 'user_profile_item',
            '#title' => t('Manage account'),
            '#markup' => l(t('Update your subscription and billing information at Recurly.'), recurly_hosted_account_manage_url($recurly_account, user_access('edit own recurly account without login'))),          );
        }
      }
    }
  }
}

/**
 * Implements hook_recurly_url_info().
 */
function recurly_hosted_recurly_url_info($operation, $context) {
  switch ($operation) {
    case 'update_billing':
      return recurly_hosted_account_manage_url($context['account'], TRUE);
    case 'subscribe':
      $entity = $context['entity'];
      $entity_type = $context['entity_type'];
      list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
      $account_code = $entity_type . '-' . $id;
      $username = isset($entity->name) ? $entity->name : $entity->title;
      return recurly_hosted_subscription_plan_purchase_url($context['plan_code'], $account_code, $username);
  }
}

/**
 * Returns an edit URL for a Recurly account.
 *
 * @param $recurly_account
 *   The recurly account values array returned by recurly_account_load.
 *
 * @return
 *   The URL for the plan's edit page at Recurly.
 */
function recurly_hosted_account_edit_url($recurly_account) {
  return recurly_hosted_url('accounts/' . $recurly_account->account_code);
}

/**
 * Returns a front end management URL for a Recurly account.
 *
 * @param $recurly_account
 *   The recurly account values array returned by recurly_account_load.
 * @param $hosted_login_token
 *   Boolean indicating whether or not to use the hosted login token in the URL
 *   if it's available in the account object; defaults to FALSE.
 *
 * @return
 *   The URL for the account's front end management page at Recurly; uses the
 *   hosted login token if specified and it's available.
 */
function recurly_hosted_account_manage_url($recurly_account, $hosted_login_token = FALSE) {
  // Return a URL using the hosted login token if available.
  if ($hosted_login_token && !empty($recurly_account->hosted_login_token)) {
    return recurly_hosted_url('account/' . $recurly_account->hosted_login_token);
  }

  return recurly_hosted_url('account');
}

/**
 * Returns a Hosted Payment Page URL for the given subscription plan.
 *
 * @param $plan
 *   The subscription plan object returned by the Recurly client.
 * @param $account_code
 *   Optional. The account code to assign to this new subscriber. This unique
 *   identifier is permanent and is used to bind the account to Drupal IDs.
 * @param $username
 *   Optional. The username that will be stored at Recurly for this subscriber.
 *   Usually just used for reference.
 * @param $settings
 *   An optional array of settings used to pre-populate the payment form.
 *   - first_name: the customer's first name
 *   - last_name: the customer's last name
 *   - email: the customer's e-mail address
 *
 * @return
 *   The URL for the plan's Hosted Payment Page at Recurly.
 */
function recurly_hosted_subscription_plan_purchase_url($plan_code, $account_code = NULL, $username = NULL, $settings = NULL) {
  $url = 'subscribe/' . $plan_code;
  if ($account_code) {
    $url .= '/' . $account_code;
    if ($username) {
      $url .= '/' . $username;
    }
  }

  if (!empty($settings)) {
    $url .= '?' . drupal_http_build_query($settings);
  }

  return recurly_hosted_url($url);
}
